#include "main.h"
#include <QWebEngineView>   //#include <QWebView> //#include <QtWebKitWidgets/QWebView>

//#include <QWebElement>
#include <QWebEnginePage>   //#include <QWebPage>
#include <QtWebEngineWidgets>



//#include <QWebFrame>
#include <QVBoxLayout>
#include <QNetworkDiskCache>
#include <QDesktopServices>
#include <QNetworkReply>
#include <QSslError>
#include <QSslCertificate>
#include <QSslConfiguration>
#include <QMessageBox>
#include <QMap>
#include <QByteArray>
#include <QDebug>
#include <QFile>
#include <QAction>
#include <QApplication>
#include <QSettings>
#include <QFileInfo>
#include <QDebug>
#include <QDir>
#include <QUrl>
#include <cassert>
#include <QDockWidget>

#ifdef Q_WS_QWS
#include <QWSServer>
#endif

#include "browsersmanager.h"
#include "browserviewinfo.h"
#include "views/recordTable/RecordTableScreen.h"
#include "controllers/recordTable/RecordTableController.h"
#include "views/recordTable/RecordTableView.h"
#include "models/recordTable/RecordTableData.h"
#include "models/recordTable/RecordTableModel.h"
#include "libraries/WindowSwitcher.h"
#include "views/browser/webview.h"
#include "libraries/qtSingleApplication5/qtsingleapplication.h"

//struct BrowserViewPrivate {
//    //Q_OBJECT
//public:
//    QWebEngineView *view;
//    QNetworkAccessManager *nam;
//    QMap<QPair<QString, int>, QByteArray> exceptions;
//    bool msgShown;
//    //~BrowserViewPrivate() = default;
//};


void BrowsersManager::loadUrl(const int pos)
{
    RecordTableController *recordTableController = globalParameters.getRecordTableScreen()->getRecordTableController();
    //int pos = recordTableController->getFirstSelectionPos();
    RecordTableModel *recordTableModel = recordTableController->getRecordTableModel();
    RecordTableData *recordTableData = recordTableModel->getRecordTableData();
    Record *record = recordTableData->getRecord(pos);

    //    QUrl _url;
    if(record) {
        //this->current_record = record;
        //_url = record->getField("url");
        mainWindow()->currentTab()->bind_record(record);
        //mainWindow()->currentTab()->bind_recordtabcontroller(recordTableController);
        loadUrl(record);
    }
}

//Record *BrowserView::findRecord()
//{
//    Record *_record = nullptr;
//    RecordTableController *recordTableController = globalParameters.getRecordTableScreen()->getRecordTableController();
//    int pos = recordTableController->getFirstSelectionPos();

//    if(pos != -1) {
//        //RecordTableView *view = recordTableController->getView();
//        //view->loadUrl();

//        RecordTableModel *recordTableModel = recordTableController->getRecordTableModel();
//        RecordTableData *recordTableData = recordTableModel->getRecordTableData();

//        Record *record = recordTableData->getRecord(pos);

//        //if(record->isLite())record->switchToFat();  // no such a value

//        //QVariant qVariant = recordTableModel->data(pos, Qt::DisplayRole);

//        //    if(current_record.isLite())current_record.switchToFat();

//        //    QString dir = globalParameters.getWorkDirectory();
//        //    QString name = this->d->view->title();

//        //    if(0 == name.size())name = "default";

//        //    this->current_record.setNaturalFieldSource("id", url.toString());

//        //    //this->current_record.setField("name", name);  //
//        //    this->current_record.setNaturalFieldSource("name", name);
//        //    //this->current_record.setField("crypt", "0");


//        //    QString author = "default";
//        //    QString tags = "default";

//        //    QString text = this->d->view->page()->mainFrame()->toHtml();

//        //    if(0 == text.size())text = "<html>no content</html>";

//        if(record) {
//            //this->current_record
//            _record = record;
//        }

//        //    this->current_record.setNaturalFieldSource("author", author);
//        //    this->current_record.setNaturalFieldSource("tags", tags);
//        //    this->current_record.setText(text);
//        //    this->current_record.setNaturalFieldSource("url", url.toString());
//        //    this->current_record.setNaturalFieldSource("dir", dir);

//    }

//    return _record;
//}

void BrowsersManager::initSetting(void)
{
    //    QUrl _url;

    //    if(record)
    //        _url = record->getField("url");

    QUrl url;
    // initialize

    QFileInfo settingsFile;

    // QString sb(QApplication::applicationDirPath());
    // sb.append(QDir::separator());
    // sb.append("browserview.ini");

    QString configFileName = globalParameters.getWorkDirectory() + "/browserview.ini";
    // check to see if we have a settings file where we started from
    // if not fall back to system hard coded path
    QFileInfo file(configFileName.toLatin1()); //file(sb.toLatin1());

    if(file.exists()) {
        qDebug() << "using local settings file";
        settingsFile.setFile(file.filePath());
    } else {
        qDebug() << "using system defined settings file";
        settingsFile.setFile(SETTINGS_FILE);
    }

    QSettings settings(settingsFile.filePath(), QSettings::NativeFormat);

    settings.beginGroup(SETTINGS_SECTION);

    //    if(_url.isEmpty()) {
    url = (settings.value("browser_view").toString());  //QUrl url(settings.value("browser_view").toString());

    //    } else {
    //        url = _url;
    //    }

    //    if(browser->currentTab()) {
    //        RecordTableController *recordtablecontroller = globalParameters.getRecordTableScreen()->getRecordTableController();
    //        //int pos = recordTableController->getFirstSelectionPos();
    //        Record *record = nullptr;

    //        //if(pos != -1) {
    //        RecordTableModel *recordtablemodel = recordtablecontroller->getRecordTableModel();
    //        //RecordTableView *recordtableview = recordtablecontroller->getView();
    //        RecordTableData *recordtabledata = recordtablemodel->getRecordTableData();
    //        record = recordtabledata->getRecordByUrl(url);
    //        //}

    //        if(record)browser->currentTab()->bind_recordtabcontroller(recordtablecontroller);

    //        if((browser->currentTab()->url() != url)) {
    //            this->setUrl(url);
    //        }
    //    }

    qDebug() << "loading url: " << settings.value("main_view").toString();

    if(settings.value("full_screen", false).toBool()) {
        this->showFullScreen();
    }

    if(settings.value("hide_cursor", false).toBool()) {
        this->setCursor(QCursor(Qt::BlankCursor));
#ifdef Q_WS_QWS
        QWSServer::setCursorVisible(false);
#endif
    }

    this->setScrollbars(settings.value("hide_scrollbars", false).toBool());
    this->setCache(settings.value("enable_cache", false).toBool(), settings.value("cache_size_megabytes", 5).toInt());

    settings.endGroup();



    this->show();

    //    RecordTableController *recordTableController = globalParameters.getRecordTableScreen()->getRecordTableController();
    //    int pos = recordTableController->getFirstSelectionPos();

    //    if(pos != -1) {
    //        //RecordTableView *view = recordTableController->getView();
    //        //view->loadUrl();

    //        RecordTableModel *recordTableModel = recordTableController->getRecordTableModel();
    //        RecordTableData *recordTableData = recordTableModel->getRecordTableData();

    //        Record *record = recordTableData->getRecord(pos);

    //        //if(record->isLite())record->switchToFat();  // no such a value

    //        //QVariant qVariant = recordTableModel->data(pos, Qt::DisplayRole);

    //        //    if(current_record.isLite())current_record.switchToFat();

    //        //    QString dir = globalParameters.getWorkDirectory();
    //        //    QString name = this->d->view->title();

    //        //    if(0 == name.size())name = "default";

    //        //    this->current_record.setNaturalFieldSource("id", url.toString());

    //        //    //this->current_record.setField("name", name);  //
    //        //    this->current_record.setNaturalFieldSource("name", name);
    //        //    //this->current_record.setField("crypt", "0");


    //        //    QString author = "default";
    //        //    QString tags = "default";

    //        //    QString text = this->d->view->page()->mainFrame()->toHtml();

    //        //    if(0 == text.size())text = "<html>no content</html>";

    //        if(record) this->current_record = record;

    //        //    this->current_record.setNaturalFieldSource("author", author);
    //        //    this->current_record.setNaturalFieldSource("tags", tags);
    //        //    this->current_record.setText(text);
    //        //    this->current_record.setNaturalFieldSource("url", url.toString());
    //        //    this->current_record.setNaturalFieldSource("dir", dir);

    //    }

    //this->current_record = findRecord();
}

void BrowsersManager::loadUrl(Record *record)
{
    QUrl _url = record->getField("url");

    if(!_url.isEmpty() && _url.isValid()) {

        if(mainWindow()->currentTab()->url() != _url) {

            //if(mainWindow())
            //mainWindow()->currentTab()->bind_recordtabcontroller(globalParameters.getRecordTableScreen()->getRecordTableController());
            mainWindow()->currentTab()->bind_record(record);
            this->setUrl(_url);
        }

        this->show();

        mainWindow()->show();
        mainWindow()->currentTab()->show();
    }
}


BrowserWindow *BrowsersManager::newMainWindow()
{
    //BrowserView *browser_view = globalParameters.getBrowserView();
    //BrowserWindow *browser = nullptr;

    //if(browser_view) {
    //        browser = browser_view->getBrowserWindow();     //
    //auto dock_widget = new QDockWidget(this, Qt::MaximizeUsingFullscreenGeometryHint);
    //dock_widget->setParent(this);
    BrowserWindow *browser = new BrowserWindow(_recordtablecontroller, this); //, dock_widget

    _dock_widget->setWidget(browser);
    browser->setParent(_dock_widget);

    //    QVBoxLayout *layout = new QVBoxLayout(this);
    //    //QDockWidget *dock_widget = new QDockWidget(this, Qt::MaximizeUsingFullscreenGeometryHint);
    //    //when change dock_widget to member variable, you need rebuild the project! else the behavior will be weird.
    //    layout->setMargin(0);
    _dock_widget->adjustSize();
    _dock_widget->setAutoFillBackground(true);
    _dock_widget->setFeatures(QDockWidget::AllDockWidgetFeatures
                             //Qt::MaximizeUsingFullscreenGeometryHint
                            );
    //        if(!browser) {
    //            browser = new BrowserWindow(browser_view);  //incomplete
    //        }
    _mainWindows.prepend(browser);
    //browser->show();
    //}

    //this->exec();
    return browser;     // BrowserView::QDockWidget::BrowserWindow*
}

BrowsersManager::BrowsersManager(RecordTableController *recordtablecontroller, QWidget *parent)
    : QWidget(parent)
      //, _application(application)
    , _recordtablecontroller(recordtablecontroller)
    , _dock_widget(new QDockWidget(this, Qt::MaximizeUsingFullscreenGeometryHint))
      //, browser(newMainWindow())
{
    //_mainWindows.prepend(browser);

    //d->view = new QWebEngineView(this);
    //d->view->page()->setScrollBarPolicy(Qt::Vertical, Qt::ScrollBarAlwaysOff);
    //d->view->page()->setScrollBarPolicy(Qt::Horizontal, Qt::ScrollBarAlwaysOff);

    //    browser->setWebAttribute(QWebEngineSettings::JavascriptEnabled, true);
    //    browser->setWebAttribute(QWebEngineSettings::JavascriptCanOpenWindows, true);

    //browser->msgShown = false;

    //    QVBoxLayout *layout = new QVBoxLayout(this);
    //    QDockWidget *dock_widget = new QDockWidget(this, Qt::MaximizeUsingFullscreenGeometryHint);
    //    when change dock_widget to member variable, you need rebuild the project! else the behavior will be weird.
    //    layout->setMargin(0);


    //    dock_widget->setWidget(browser);
    //    //    layout->addWidget(browser);
    //    //    browser->setLayout(layout);
    //    browser->setParent(dock_widget);

    setupActions();

    setupUI();
    assembly();

    initSetting();

    setupSignals();

    //d->nam = d->view->page()->networkAccessManager();

    //connect(d->nam, SIGNAL(finished(QNetworkReply *)), this, SLOT(finished(QNetworkReply *)));

    //connect(d->nam, SIGNAL(sslErrors(QNetworkReply *, const QList<QSslError> &)), this, SLOT(sslErrors(QNetworkReply *, const QList<QSslError> &)));

    //    browser->show();
}

BrowsersManager::~BrowsersManager()
{
    for(int i = 0; i < _mainWindows.size(); ++i) {
        BrowserWindow *window = _mainWindows.at(i);
        delete window;
    }

    //if(isselfcreated())delete current_record;   // no, do not apply memory by this class for record, from the original source
    if(_actionFreeze)delete _actionFreeze;

    if(_dock_widget)delete _dock_widget;

    //    if(browser)delete browser;  // I can't destroy?
}


void BrowsersManager::setupActions()
{
    _actionFreeze = new QAction(tr("Freeze browser view"), this);
    _actionFreeze->setStatusTip(tr("Freeze browser view"));
    _actionFreeze->setIcon(QIcon(":/resource/pic/freeze_browser_view.png"));
}

void BrowsersManager::setupUI(void)
{

}

//void BrowserView::setupDynamicSignals(void)
//{

//    //    //Connect a signal to a pointer to qobject member function
//    //    template <typename Func1, typename Func2>
//    //    static inline QMetaObject::Connection connect(
//    //        const typename QtPrivate::FunctionPointer<Func1>::Object *sender, Func1 signal,
//    //        const typename QtPrivate::FunctionPointer<Func2>::Object *receiver, Func2 slot,
//    //        Qt::ConnectionType type = Qt::AutoConnection);

//    static QMetaObject::Connection _connection_loadfinished;    // for disconnect
//    static QMetaObject::Connection _connection_openlinkinnewtab;

//    if(_connection_loadfinished.operator void *QMetaObject::Connection:: * () != nullptr) {
//        QObject::disconnect(_connection_loadfinished);
//    }

//    if(_connection_openlinkinnewtab.operator void *QMetaObject::Connection:: * () != nullptr) {
//        QObject::disconnect(_connection_openlinkinnewtab);
//    }

//    //…
//    //    _connection = QObject::connect(…);
//    //…
//    //    QObject::disconnect(_connection);
//    if(browser->currentTab() != nullptr) {
//        _connection_loadfinished =  //QWebView::
//            connect
//            //                   <
//            //                   void (QWebView::*)(bool)
//            //                   , void (RecordTableController::*)(void)
//            //                   >
//            (
//                browser->currentTab()
//                //, &BrowserView::urlChanged//, &QWebView::urlChanged  //
//                , &WebView::loadFinished
//                , this//globalParameters.getRecordTableScreen()->getRecordTableController()
//                //, &BrowserView::onUrlChanged//&RecordTableController::autoAddNewAfterContext
//                , &BrowserView::onLoadFinished//
//            );

//        //    _connection = connect(this
//        //                          , &BrowserView::loadChanged
//        //                          , globalParameters.getRecordTableScreen()->getRecordTableController()
//        //                          , &RecordTableController::autoAddNewAfterContext);

//        //void (BrowserView::*lU)(const QUrl &) = &BrowserView::loadUrl;
//        _connection_openlinkinnewtab = connect
//                                       //                  <
//                                       //                  void (QWebEngineView::*)(const QUrl &)
//                                       //                  , void (BrowserView::*)(const QUrl &)
//                                       //                  >
//                                       (browser->currentTab()
//                                        , &WebView::openLinkInNewTab
//                                        , this
//                                        //, &BrowserView::loadUrl //
//                                        , &BrowserView::openLinkInNewTab
//                                       );
//    }
//}

void BrowsersManager::setupSignals(void)
{
    connect(this->_actionFreeze, SIGNAL(triggered()), globalParameters.getWindowSwitcher(), SLOT(findInBaseClick()));
}

void BrowsersManager::assembly(void)
{

}

void BrowsersManager::setUrl(const QUrl &_url)
{
    //if(browser)
    mainWindow()->loadPage(_url.toString());
}

void BrowsersManager::setScrollbars(bool hide)
{
    if(!hide) {
        //d->view->page()->setScrollBarPolicy(Qt::Vertical, Qt::ScrollBarAsNeeded);
        //d->view->page()->setScrollBarPolicy(Qt::Horizontal, Qt::ScrollBarAsNeeded);
    }
}

void BrowsersManager::setCache(bool cache, int cacheSize)
{
    if(cache) {
        QNetworkDiskCache *diskCache = new QNetworkDiskCache(this);
        QString location = QStandardPaths::writableLocation(QStandardPaths::CacheLocation);
        diskCache->setCacheDirectory(location);
        diskCache->setMaximumCacheSize(cacheSize * 1024 * 1024); //in MB's
        //d->nam->setCache(diskCache);
        //        browser->setCache(diskCache);
        qDebug() << QString("Cache location: %1").arg(location);
        qDebug() << QString("Cache maximum size: %1MB").arg(cacheSize);
    }
}

//deprecated
void BrowsersManager::onLoadFinished(bool finished)
{
    if(finished) {

        //        //QWebFrame *frame = d->view->page()->mainFrame();
        //        //QWebElement dom_title(frame->findFirstElement("title"));
        //        QString title = mainWindow()->currentTab()->title();   //dom_title.evaluateJavaScript("this.text").toString();

        //        RecordTableController *recordTableController = globalParameters.getRecordTableScreen()->getRecordTableController();

        //        //RecordTableData *recordTableData = recordTableController->getRecordTableModel()->getRecordTableData();

        //        int pos = recordTableController->getFirstSelectionPos();
        //        Record *_record = recordTableController->getRecordTableModel()->getRecordTableData()->getRecord(pos);

        //        if(_record)_record->setNaturalFieldSource("name", title);

        mainWindow()->currentTab()->synchronize_title_to_record();
    }
}

// deprecated, move to class WebView
void BrowsersManager::openLinkInNewTab()
{
    //QString url(QString(""));
    QUrl _url = mainWindow()->currentTab()->url();

    RecordTableController *recordTableController = globalParameters.getRecordTableScreen()->getRecordTableController();

    RecordTableData *recordTableData = recordTableController->getRecordTableModel()->getRecordTableData();

    if(!recordTableData->isRecordExists(_url)) {

        int pos = recordTableController->getFirstSelectionPos();
        Record *previous_record = recordTableController->getRecordTableModel()->getRecordTableData()->getRecord(pos);

        if(previous_record) {
            Record record;

            if(record.isLite())record.switchToFat();

            //QString title = d->view->title(); // not ready yet
            record.setNaturalFieldSource("id",   previous_record->getNaturalFieldSource("id"));
            record.setNaturalFieldSource("name",   previous_record->getNaturalFieldSource("name"));
            record.setNaturalFieldSource("author", previous_record->getNaturalFieldSource("author"));
            record.setNaturalFieldSource("url",    _url.toString());    // only changed
            record.setNaturalFieldSource("tags",   previous_record->getNaturalFieldSource("tags"));

            recordTableController->addNew(ADD_NEW_RECORD_AFTER, record);   //recordTableController->autoAddNewAfterContext();
        }
    }

    //    Record *previous_record = recordTableController->getRecordTableModel()->getRecordTableData()->getRecord(pos);
    //    //if(current_record)
    //    url = previous_record->getNaturalFieldSource("url");

    //    std::string url_compare_stored = _url.toString().toStdString();
    //    std::string url_compare_get = url.toStdString();
    //    std::string compare = getDifference(url_compare_stored, url_compare_get);
    //    //QUrl qurl(url);

    //    //if(qurl != _url) {
    //    if(compare.size() != 0 && compare != "/") { // really changed!

    //        //if(this->current_record->getNaturalFieldSource("url") != _url.toString()) {



    //        //this->current_record = new Record();    // should from framework

    //        Record record;

    //        if(record.isLite())record.switchToFat();

    //        record.setNaturalFieldSource("id",   previous_record->getNaturalFieldSource("id"));
    //        record.setNaturalFieldSource("name",   previous_record->getNaturalFieldSource("name"));
    //        record.setNaturalFieldSource("author", previous_record->getNaturalFieldSource("author"));
    //        record.setNaturalFieldSource("url",    _url.toString());    // only changed
    //        record.setNaturalFieldSource("tags",   previous_record->getNaturalFieldSource("tags"));

    //        //record.setText(browser_view->getText());
    //        if(!recordTableData->isRecordExists(_url)) {
    //            //this->current_record->setNaturalFieldSource("url", _url.toString());
    //            recordTableController->addNew(ADD_NEW_RECORD_AFTER, record);   //recordTableController->autoAddNewAfterContext();

    //            //loadUrl(_url);

    //            //this->current_record = findRecord();
    //            //assert(this->current_record->getNaturalFieldSource("url") == _url.toString());
    //        }

    //    }
}


void BrowsersManager::finished(QNetworkReply *reply)
{
    if(reply->error() != QNetworkReply::NoError) {
        qDebug() <<  QString("Network Error: %1").arg(reply->errorString());
    }

    if(reply->attribute(QNetworkRequest::SourceIsFromCacheAttribute).toBool() == true) {
        QVariant contentVar = reply->header(QNetworkRequest::ContentTypeHeader);
        qDebug() <<  QString("Cache Used: %1").arg(contentVar.toString());
    }

    //    QUrl url = reply->url();
    //    QString _url = current_record->getNaturalFieldSource("url");
    //    std::string url_compare_stored = _url.toStdString();
    //    std::string url_compare_get = url.toString().toStdString();
    //    std::string compare = "";

    //    if(url_compare_stored.size() >= url_compare_get.size()) {
    //        url_compare_stored.erase(url_compare_get.begin(), url_compare_get.end());
    //        compare = url_compare_stored;
    //    } else {
    //        url_compare_get.erase(url_compare_stored.begin(), url_compare_stored.end());
    //        compare = url_compare_get;
    //    }

    //    std::string::size_type pos;

    //    while((pos = compare.find_first_of(" ")) != compare.npos)compare.erase(pos, 1);

    //    if(compare == "" || compare == "/") {
    //        //if(this->current_record->getNaturalFieldSource("url") != url.toString()) {
    //        this->current_record->setNaturalFieldSource("url", url.toString());
    //        this->loadChanged();
    //    }

}

void BrowsersManager::sslErrors(QNetworkReply *reply, const QList<QSslError> &errors)
{
    foreach(const QSslError &error, errors) {
        qDebug() << QString("SSL Error: %1").arg(error.errorString());
    }

    reply->ignoreSslErrors(errors);
}


void BrowsersManager::clean()
{
    // cleanup any deleted main windows first
    for(int i = _mainWindows.count() - 1; i >= 0; --i)
        if(_mainWindows.at(i).isNull())
            _mainWindows.removeAt(i);
}

BrowserWindow *BrowsersManager::mainWindow()
{
    clean();

    if(_mainWindows.isEmpty()) {
        //        BrowserView *browser_view = globalParameters.getBrowserView();
        //        BrowserWindow *browser = nullptr;

        //        if(browser_view) {
        //            browser = browser_view->getBrowserWindow();

        //            if(nullptr == browser) {
        //                browser = new BrowserWindow(browser_view);
        //            }
        //        }

        //        m_mainWindows.prepend(browser);
        newMainWindow();
    }

    return _mainWindows[0];
}


QList<BrowserWindow *> BrowsersManager::mainWindows()
{
    clean();
    QList<BrowserWindow *> list;

    for(int i = 0; i < _mainWindows.count(); ++i)
        list.append(_mainWindows.at(i));

    return list;
}

#if defined(Q_OS_OSX)
void BrowserView::lastWindowClosed()
{
    clean();
    BrowserWindow *mw = new BrowserWindow(this);
    mw->slotHome();
    _mainWindows.prepend(mw);
}
#endif


void BrowsersManager::openUrl(const QUrl &url)
{
    mainWindow()->loadPage(url.toString());
}
